:q
mapAccumL' :: (String -> Char -> (String, Char)) -> String -> [Char] -> (String, [Char]); mapAccumL' = undefined
:t mapAccumL
:t mapAccumL @(String -> Char -> (String, Char))
:t mapAccumL @String @Char
:t mapAccumL @String
:t mapAccumL @String @ 
:set -XTypeApplications
:t mapAccumL
makePattern "moody" "gloom"
makePattern "block" "gloom"
makePattern "arose" "gloom"
:r
makePattern "arose" "gloom"
makePatter "arose" "gloom"
:r
:r
:load src/Wordle.hs
:q
:r
makePattern "hoge" "huga"
:r
makePattern "hoge" "huga"
:r
:r
:l src/Wordle.hs
:q
:l src/Wordle.hs
:q
length dict
putStr $ unlines dict
dict = initialDict (words hoge)
hoge <- readFile "/usr/share/dict/words"
:r
length dict
putStr $ unlines dict
dict = initialDict (words hoge)
hoge <- readFile "/usr/share/dict/words"
:l src/Wordle.hs
:l src/Wordle.hs
length dict
putStr $ unlines dict
dict = initialDict (words hoge)
dict5 = initalDict (words hoge)
import Wordle
:import Wordle
dict5 = initalDict (words hoge)
putStr $ unlines $ words hoge
:t hoge
hoge <- readFile "/usr/share/dict/words"
:l src/Wordle.hs
